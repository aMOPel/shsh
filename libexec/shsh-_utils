#!/usr/bin/env sh
#
# Summary: Utilities that are used throughout the project

resolve_link() {
  if type greadlink >/dev/null 2>&1; then
    greadlink -f "$1"
  else
    if ! readlink -f "$1" 2>/dev/null; then
      # use self-implemented `readlink -f`
      readlink_canonicalise "$1"
    fi
  fi
}

readlink_canonicalise() (  # we are using subshell to prevent messing up cd
  # This is poor man's GNU `readlink -f`
  # useful for mac without GNU readlink
  # based on https://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac
  _target="$(basename "$1")"
  cd "$(dirname "$1")" || exit 1
  i=0
  # Iterate down a (possible) chain of symlinks
  while [ -L "$_target" ]; do
      _target="$(readlink "$_target")"
      cd "$(dirname "$_target")" || exit 1
      _target="$(basename "$_target")"
      i=$((i+1))
      if [ "$i" -gt 1000 ]; then  # check for symlink loop
        echo "Probably encountered symlink loops while resolving path" 1>&2 && exit 1
      fi
  done
  echo "$(pwd -P)"/"$_target"
)

echo_if_verbose() {
  if [ -n "$SHSH_VERBOSE" ]; then
    echo "$1"
  fi
}

remove_linked() {
  # Given a folder as first arg, if anything that follows it
  # is a link resides within the folder, delete it
  _package="$(resolve_link "$1")"
  shift
  for _link; do
    # do nothing if the arugnment is not an actual file
    [ -e "$_link" ] || [ -L "$_link" ] || continue
    case "$(resolve_link "$_link")" in
      "$_package/"*)
        echo_if_verbose "Unlinking $_link"
        rm -f "$_link"
        ;;
    esac
  done
}

add_link() {
  # argunments: src=$1; target=$2
  [ -e "$1" ] || [ -L "$1" ] || return 0

  echo_if_verbose "Linking '$1' to '$2'"
  ln -s "$1" "$2"
}

git_check_up_to_date() {
  cd "$1" || exit 1
  git remote update > /dev/null 2>&1
  if git symbolic-ref --short -q HEAD > /dev/null; then
    if [ "$(git rev-list --count "HEAD...HEAD@{upstream}")" -gt 0 ]; then
      return 1
    fi
  fi
}

gh_release_check_up_to_date() {
  package="$1"
  folder="$2"
  # currently this does not respect requested tag-name
  current_date="$(jq -r '.published_at' < "$folder/.gh-release_info")"
  latest_date="$(request_gh_release_info "$package" 2>/dev/null | jq -r '.published_at')"
  if [ "$(date --date="$current_date" +%s)" -lt "$(date --date="$latest_date" +%s)" ]; then
    return 1
  fi
  return 0
}

clear_prev_lines() {
  if [ -n "$SHSH_USE_TPUT" ]; then
    # clear all lines at once (ed clear from current to end of screen)
    tput cuu "$1"
    tput ed
   # for _ in $(seq 1 "$1"); do
   #   # go to previous line
   #   tput cuu 1
   #   # clear line
   #   tput el
   # done
  else
    for _ in $(seq 1 "$1"); do
      # go to previous line
      printf "\033[1A"
      # clear line
      printf "\033[2K"
    done
  fi
}

update_line() {
  _lockfile="$3"
  # given a token of a line, update the line with new content
  awk '$0~v {$0="'"$2"'"} 1' v="$1" \
    "$_lockfile" > "${_lockfile}.tmp" && mv "${_lockfile}.tmp" "${_lockfile}"
}

get_operation_root() {
  dest="$1"
  if [ -n "$ROOT" ]; then
    # expand glob
    for _expanded_var in $1/$ROOT; do
      dest="$_expanded_var"
      if [ ! -e "$dest" ]; then
        >&2 echo ">> specified root '$ROOT' does not exists inside '$1'!"
        exit 1
      fi
      break
    done
  fi
  echo "$dest"
}

execute_hooks() {
  # $1: user-friendly description
  # $2: target folder
  # $3: the script to execute
  echo "> Executing $1"
  # most of the time, hooks might be executed when folder is empty... so it's better to leave it to the user to cd on-their-own
  # dir="$(get_operation_root "$2")"
  dir="$2"
  (eval "set -x && cd \"$dir\" && $3")
}

request_gh_release_info() {
  package="$1"
  ref="$2"
  url="https://api.github.com/repos/$package/releases"
  if [ -n "$ref" ]; then
    url="$url/tags/$ref"
  else
    url="$url/latest"
  fi
  out="$(curl "$url")"
  case "$(jq -n --argjson data "$out" '$data.message')" in
    *"API rate limit"*)
      >&2 echo "Github release API rate limit reached"
      exit 1
      ;;
  esac
  printf '%s' "$out"
}

check_key_val_pair() {
  # Check if the given argument is in XX=XX format
  case "$1" in (*=*) return 0 ;;esac
  echo "Invalid argunment for flag '$2' with argunment '$1'"
  echo "Must be in the format of $2 <KEY>=<VALUE>"
  exit 1
}

requote_args() {
  # Given a list of args, add quotes if necessary
  C=''
  for i in "$@"; do
    case "$i" in
      -f|--force)
        # skip
        continue
        ;;
      *[[:space:]]*)  # contain space
        case "$i" in
          *\'*)  # escape single quote
            i="$(printf "%s" "$i" | sed "s/'/'\"'\"'/g")"
            ;;
          *) : ;;
        esac
        # quote only the parts after equal sign
        # i.e. in the format of pre='echo foo && echo bar'
        case "$i" in
          *=*)  # escape single quote
            i="${i%%=*}='${i#*=}'"
            ;;
          *)  # normal case
            i="'$i'" ;;
        esac ;;
      *) # no space, do nothing
        : ;;
    esac
    if [ -z "$C" ]; then
      C="$i"
    else
      C="$C $i"
    fi
  done
  printf "%s" "$C"
}

command_exists() {
  if command -v "$1" >/dev/null 2>&1; then
    return 0
  else
    return 1
  fi
}

turn_off_line_wrapping() {
  # tput requires $TERM to functions properly
  [ -z "$TERM" ] && return
  command_exists tput && export SHSH_USE_TPUT=1
  # turn off line wrapping for correct display
  [ -n "$SHSH_USE_TPUT" ] && tput rmam && restore_tput=1
}

restore_line_wrapping() {
  [ -n "$restore_tput" ] && tput smam  # turn line wrapping back on
}

prompt ()  {
  while true; do
    printf '%s [y/N]? ' "$1"
    read -r answer
    case $answer in
      y|Y|yes|YES) return 0;;
      ''|n|N|no|NO) return 1;;
      *)
        echo 'Invalid response';
    esac
  done
}

parse_hooks_and_setvar() {
  # shellcheck disable=SC2116
  EOL=$(echo '\00\07\01\00')
  if [ "$#" != 0 ]; then
    set -- "$@" "$EOL"
    while [ "$1" != "$EOL" ]; do
      opt="$1"; shift
      case "$opt" in
        -h|--hook)
          case "$1" in
            pre=*|post=*|uninstall=*)
              _hook_type="$(echo "${1%%=*}" | tr '[:upper:]' '[:lower:]')"
              _hook_value="${1#*=}"
              case "$_hook_type" in
                pre)
                  SHSH_HOOK_PRE="$_hook_value"
                  export SHSH_HOOK_PRE
                  ;;
                post)
                  SHSH_HOOK_POST="$_hook_value"
                  export SHSH_HOOK_POST
                  ;;
                uninstall)
                  SHSH_HOOK_UNINSTALL="$_hook_value"
                  export SHSH_HOOK_UNINSTALL
                  ;;
                esac
              ;;
            +x=*)
              if [ -z "$SHSH_HOOK_PLUS_X" ]; then
                SHSH_HOOK_PLUS_X="${1#*=}"
              else
                SHSH_HOOK_PLUS_X="$SHSH_HOOK_PLUS_X:${1#*=}"
              fi
              export SHSH_HOOK_PLUS_X
              ;;
            a+x)
              SHSH_HOOK_ALL_PLUS_X=true
              export SHSH_HOOK_ALL_PLUS_X
              ;;
            *)
              echo "Unrecognized hook type '$1'"
              exit 1
              ;;
          esac
          shift
          ;;
        -v|--variable)
          check_key_val_pair "$1" "$opt"
          _var="${1%%=*}"
          _val="${1#*=}"
          [ -z "$_var" ] && echo "Invalid argunment for '--variable' with '$1'" && exit 1
          eval "$_var='$_val'"
          export "${_var?}"
          shift ;;
        --*=*)  # convert '--name=arg' to '--name' 'arg'
          set -- "${opt%%=*}" "${opt#*=}" "$@";;
        *)
          # set back any unused args
          set -- "$@" "$opt"
      esac
    done
    shift # remove the EOL token
  fi
  SHSH_ARGV="$*"
  export SHSH_ARGV
}

shshrc_get_existing_install_cmd() {
  set +e
  unset existing existing_prefix existing_suffix
  # given $1 as the package name, return the existing line in SHSHRC that installs
  # that package
  if [ -e "$SHSHRC" ]; then
    existing="$(grep -E "^\s*shsh install (.*\s+)?$1(\s.*)?$" "$SHSHRC")"
    # extract suffix if any (e.g. '&& \' or '|| \')
    _ending_pattern='\s+([&][&]|[|][|])\s*[\]\s*$'
    existing_suffix="$(echo "$existing" | grep -oE "$_ending_pattern")"
    # extract prefix if any (i.e. white spaces)
    existing_prefix="$(echo "$existing" | grep -oE "^\s*")"
    # remove these from the statement for comparison
    existing="$(echo "$existing" | sed -E "s/$_ending_pattern//; s/^(\s*)//")"
  fi
  export existing
  export existing_prefix
  export existing_suffix
}
