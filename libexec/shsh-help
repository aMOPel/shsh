#!/usr/bin/env sh
#
# Summary: Display help for a command
#
# Usage: shsh help [--usage] COMMAND
#
# Parses and displays help contents from a command's source file.
#
# A command is considered documented if it starts with a comment block
# that has a `Summary:' or `Usage:' section. Usage instructions can
# span multiple lines as long as subsequent lines are indented.
# The remainder of the comment block is displayed as extended
# documentation.

set -e

command_path() {
  _command="$1"
  if [ -z "$_command" ]; then
    command -v shsh || true
  else
    command -v shsh-"$_command" || true
  fi
}

extract_initial_comment_block() {
  sed -ne "
    /^#/ !{
      q
    }

    s/^#$/# /

    /^# / {
      s/^# //
      p
    }
  "
}

collect_documentation() {
  awk '
    /^Summary:/ {
      summary = substr($0, 10)
      next
    }

    /^Usage:/ {
      reading_usage = 1
      usage = usage "\n" $0
      next
    }

    /^( *$|       | +or: +)/ && reading_usage {
      usage = usage "\n" $0
      next
    }

    {
      reading_usage = 0
      help = help "\n" $0
    }

    function escape(str) {
      gsub(/[`\\$"]/, "\\\\&", str)
      return str
    }

    function trim(str) {
      sub(/^\n*/, "", str)
      sub(/\n*$/, "", str)
      return str
    }

    END {
      if (usage || summary) {
        print "summary=\"" escape(summary) "\""
        print "usage=\"" escape(trim(usage)) "\""
        print "help=\"" escape(trim(help)) "\""
      }
    }
  '
}

documentation_for() {
_filename="$(command_path "$1")"
  if [ -n "$_filename" ]; then
    extract_initial_comment_block < "$_filename" | collect_documentation
  fi
}

print_summary() {
  _command="$1"
  eval "$(documentation_for "$_command")"

  echo "${summary:=}"
}

print_summaries() {
  for command; do
    printf "  %-12s   %s\n" "$command" "$(print_summary "$command")"
  done
}

print_help() {
  _command="$1"
  eval "$(documentation_for "$_command")"
  [ -n "$help" ] || help="$summary"

  if [ -n "${usage:=}" ] || [ -n "${summary:=}" ]; then
    if [ -n "$usage" ]; then
      echo "$usage"
    else
      echo "Usage: shsh ${_command}"
    fi
    if [ -n "$help" ]; then
      echo
      echo "$help"
      echo
    fi
  else
    echo "Sorry, this command isn't documented yet." >&2
    return 1
  fi
}

print_usage() {
  _command="$1"
  eval "$(documentation_for "$_command")"
  [ -z "$usage" ] || echo "$usage"
}

unset only_print_usage
for arg; do
  shift
  case "$arg" in
    --usage)
      only_print_usage="true"
      ;;
    --complete)
      exec shsh-commands
      ;;
    -*)
      echo "Unknown flag '$arg'"
      exit 1
      ;;
    *)
      set -- "$@" "$arg"
  esac
done

if [ -z "$1" ] || [ "$1" = "shsh" ]; then
  if [ -n "$only_print_usage" ]; then
    print_usage
    exit
  fi
  print_summary
  echo
  print_usage
  echo
  echo "Some useful shsh commands are:"
  # shellcheck disable=SC2046  # we want word splitting
  print_summaries $(shsh-commands)

  echo
  # shellcheck disable=SC2016
  echo 'See `shsh <command> --help` or `man shsh-<command>` for specific help.'

  eval "$(documentation_for "")"
  printf '\n%s\n' "$help"

else
  command="$1"
  if [ -n "$(command_path "$command")" ]; then
    if [ -n "$only_print_usage" ]; then
      print_usage "$command"
    else
      print_summary "$command"
      echo
      print_help "$command"
    fi
  else
    echo "shsh: no such command '$command'" >&2
    exit 1
  fi
fi
