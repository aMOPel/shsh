#!/usr/bin/env sh
#
# Summary: Displays a list of outdated packages
# Usage: shsh outdated [-q|--quiet]

# set -e

. "${UTILS_FUNC:?}"

case "$1" in
  -q|--quiet)
    quiet="true"
    ;;
esac

check_up_to_date() {
  # check updates with git, where directory is $1
  dir="$SHSH_PACKAGES_PATH/$1"
  if [ ! -L "$dir" ]; then
    if ! git_check_up_to_date "$dir"; then
      echo "$dir"
    fi
  fi
}


if command -v mktemp >/dev/null && command -v flock >/dev/null; then
  # perform checks with multithreads
  lockfile="$(mktemp)"
  # max timeout 20 sec
  flock -V 2>&1 | grep -iq "BusyBox" || flock_opt="-w 20"

  # echo $lockfile
  if [ -z "$quiet" ]; then  # verbose
    for package in $(shsh list); do
      echo "Checking $package..." >> "$lockfile"
    done
    line_nums=$(wc -l < "$lockfile")
    cat "$lockfile"
  fi
  for package in $(shsh list); do
    (
      output=$(check_up_to_date "$package")
      if [ -z "$quiet" ]; then  # verbose
        if [ -z "$output" ]; then
          msg="OK $package"
        else
          msg="Outdated with $package"
        fi
        flock ${flock_opt} 5 || :
        update_line "$package" "$msg" "$lockfile"
        clear_prev_lines "$line_nums"
        cat "$lockfile"
      else
        if [ -n "$output" ]; then
          # try to obtains lock to output to stdout
          flock ${flock_opt} 5 || :
          echo "$package"
        fi
      fi
    ) 5>>"$lockfile" &
  done
  wait
  # cleanup
  rm -f "$lockfile"
else
  # doesn't contain the necessary utilities, we will perform in sequential order
  for package in $(shsh list); do
    check_up_to_date "$package"
  done
fi
