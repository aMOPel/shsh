#!/usr/bin/env sh
#
# Summary: A package manager for shell scripts
#
# Usage: shsh <command> [<args>]

set -e

resolve_link() {
  $(which greadlink readlink 2>/dev/null | head -1) "$1"
}

abs_dirname() (
  # use subshell to prevent changing directory
  local path="$1"

  while [ -n "$path" ]; do
    cd "${path%/*}" || exit 1
    local name="${path##*/}"
    path="$(resolve_link "$name" || true)"
  done

  pwd
)

shsh_root_prefix="${XDG_DATA_HOME:-$HOME/.local/share}"
export SHSH_ROOT="$shsh_root_prefix/shsh"

export SHSH_PREFIX="${SHSH_PREFIX:=$SHSH_ROOT/cellar}"
export SHSH_PACKAGES_PATH="${SHSH_PACKAGES_PATH:=$SHSH_PREFIX/packages}"
export SHSH_INSTALL_BIN="${SHSH_INSTALL_BIN:=$SHSH_PREFIX/bin}"
export SHSH_INSTALL_MAN="${SHSH_INSTALL_MAN:=$SHSH_PREFIX/man}"

bin_path="$(abs_dirname "$0")"
export PATH="${bin_path}:${PATH}"
export UTILS_FUNC="$bin_path/shsh-_utils"

for arg; do
  shift
  case "$arg" in
    --help)
      show_help="true"
      ;;
    --verbose)
      export SHSH_VERBOSE="true"
      ;;
    --version)
      echo "shsh (shell script handler) v2.2"
      exit
      ;;
    *)
      # set back any unused args
      set -- "$@" "$arg"
  esac
done

command="$1"
case "$command" in
--help|"")
  shsh-help
  ;;
* )
  command_path="$(command -v "shsh-$command" || true)"
  if [ -z "$command_path" ]; then
    shsh-help
    exit 1
  fi
  if [ -n "$show_help" ]; then
    shsh-help "$command"
    exit
  fi

  shift 1
  exec "$command_path" "$@"
  ;;
esac
