#!/usr/bin/env sh
#, respectively.
# Summary: Installs a package from github (or a custom site)
#
# Usage: shsh install [--ssh] [site]/<package>[@ref] [folder] [-h|--hook <hook>]
#                     [-v|--variable <VAR>=<VAL>]
#
# Options:
#       -h, --hook <HOOK_TYPE>[=<CONTENT>]
#                    add HOOK to this package, which is triggered while 
#                    installing or upgrading a package
#       -v --variable <VAR>=<VAL>
#                    set a variable VAR with value VAL,
#                    useful for setting up files for linking 
#
#       --verbose    display more info for some commands
#
# Hook types:
#   pre=<SCRIPT>     Any arbitrary POSIX script that runs before linking.
#   post=<SCRIPT>    Any arbitrary POSIX script that runs after linking.
#   uninstall=<...>  Any arbitrary POSIX script that runs before uninstalling.
#                    For the above hooks, if multiples are given, the older
#                    one will be overriden.
#   +x=<FILE>        Before linking, adds executable bit to the FILE. If
#                    multiples are given, they will be run in sequential order.
#   a+x              Before linking, add executable bit to all files.
# 
# Examples:
#   shsh install soraxas/dot-reminder
#                    install 'soraxas/dot-reminder' as a package
#   shsh install --ssh <package>
#                    install with ssh protocal (rather than https)
#   shsh install <package> -v FISH_COMPLETIONS=synoservice.fish:forgit.fish
#                    link 'synoservice.fish' and 'forgit.fish' as fish
#                    completion files
#   shsh install <package> --hook pre="mv bin/foo bin/bar"
#                    Execute the script "mv bin/foo bin/bar" before `shsh`
#                    performs linking (e.g. this script renames the binary)
#   shsh install <package> --hook +x=foobar
#                    add a hook that add executable bits to the file 'foobar',
#                    before linking is performed
#   shsh install <package> -h pre='make all' -h post='rm -r build/*'
#                    add a hook that runs 'make all' to build binaries, right
#                    after cloning and before linking is performed. Then, 
#                    linking is performed with its usual rules (i.e. all 
#                    executable files in root and in bin/). Finally, 
#                    'rm -r build/*' is ran to remove leftovers.


set -e

check_key_val_pair() {
  case "$1" in (*=*) return 0 ;;esac
  echo "Invalid argunment for flag '$2' with argunment '$1'"
  echo "Must be in the format of $2 <KEY>=<VALUE>"
  exit 1
}

use_ssh="false"

EOL=$(echo '\00\07\01\00')
if [ "$#" != 0 ]; then
  set -- "$@" "$EOL"
  while [ "$1" != "$EOL" ]; do
    opt="$1"; shift
    case "$opt" in
      --ssh)
        use_ssh="true"
        ;;
      -h|--hook)
        case "$1" in
          pre|post|uninstall|+x)
            check_key_val_pair "$1" "$opt"
            ;;
          pre=*|post=*|uninstall=*)
            _hook_type="${1%%=*}"
            _hook_value="${1#*=}"
            eval "hook_$_hook_type='$_hook_value'"
            shift ;;
          +x=*)
            if [ -z "$hook_plus_x" ]; then
              hook_plus_x="${1#*=}"
            else
              hook_plus_x="$hook_plus_x:${1#*=}"
            fi
            shift ;;
          a+x)
            hook_all_plus_x=true
            ;;
          *)
            echo "Unrecognized hook type '$1'"
            exit 1
            ;;
        esac
        ;;
      -v|--variable)
        check_key_val_pair "$1" "$opt"
        _var="${1%%=*}"
        _val="${1#*=}"
        [ -z "$_var" ] && echo "Invalid argunment for '--variable' with '$1'" && exit 1
        eval "$_var='$_val'"
        export "$_var"
        shift ;;
      --*=*)  # convert '--name=arg' to '--name' 'arg'
        set -- "${opt%%=*}" "${opt#*=}" "$@";;                        
      -[^-]?*)  # convert '-abc' to '-a' '-b' '-c'
        set -- $(echo "${opt#-}" | sed 's/\(.\)/ -\1/g') "$@";;       
      --)  # process remaining arguments as positional
        while [ "$1" != "$EOL" ]; do set -- "$@" "$1"; shift; done;;  
      -*)
        echo "Error: Unsupported flag '$opt'" >&2
        exit 1
        ;;
      *)
        # set back any unused args
        set -- "$@" "$opt"
    esac
  done
  shift # remove the EOL token
fi

# echo "\$hook_pre=$hook_pre"
# echo "\$hook_post=$hook_post"
# echo "\$hook_uninstall=$hook_uninstall"
# echo "\$hook_plus_x=$hook_plus_x"
# echo "\$hook_all_plus_x=$hook_all_plus_x"
# echo "\$@=$@"


if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
  shsh-help install
  exit 1
fi

case "$1" in
  */*/*)
    IFS=/ read -r site user name <<EOF
$1
EOF
    ;;
  */*)
    IFS=/ read -r user name <<EOF
$1
EOF
    site="github.com"
    ;;
  *)
    shsh-help install
    exit 1
    ;;
esac
package="${user}/${name}"

# defaults to package's name, but allows custom folder name
folder="$package"
if [ -n "$2" ]; then
  case "$2" in
    */*)
      ;;
    *)
      shsh-help install
      echo "Optional argunment [folder] must be in the format <...>/<...>"
      exit 1
      ;;
  esac
  folder="$2"
fi

if [ -z "$package" ]; then
  shsh-help install
  exit 1
fi

IFS=/ read -r user name <<EOF
$package
EOF

if [ -z "$user" ]; then
  shsh-help install
  exit 1
fi

if [ -z "$name" ]; then
  shsh-help install
  exit 1
fi

ref=""
case "$package" in
  */*@*)
    IFS=@ read -r package ref <<EOF
$package
EOF
    ;;
esac

if [ -z "$folder" ]; then
  folder="$package"
fi
target_folder="${SHSH_PACKAGES_PATH}/$folder"

execute_hooks() {
  echo "> Executing $1"
  (cd "$target_folder" && eval "$2")
}

# only perform link if clone is successful (and package not exists before)
if shsh-_clone "$use_ssh" "$site" "$package" "$ref" "$folder"; then
  shsh-_deps "$folder"
  # [ -n "${hooks[+x]}" ] && execute_hooks "+x-hook" "chmod +x ${hooks[+x]}"
  # [ -n "${hooks[a+x]}" ] && execute_hooks "a+x hook" "chmod -R +x ."
  # [ -n "${hooks[pre]}" ] && execute_hooks "pre-hook" "${hooks[pre]}"

  shsh-_link-bins "$folder"
  shsh-_link-man "$folder"
  shsh-_link-completions "$folder"
  # [ -n "${hooks[post]}" ] && execute_hooks "post-hook" "${hooks[post]}"
fi
