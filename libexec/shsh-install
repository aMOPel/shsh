#!/usr/bin/env sh
#, respectively.
# Summary: Installs a package from github (or a custom site)
#
# Usage: shsh install [--ssh] [site]/<package>[@ref] [folder] [-h|--hook <hook>]
#                     [-v|--variable <VAR>=<VAL>]
#
# Options:
#       -h, --hook <HOOK_TYPE>[=<CONTENT>]
#                    add HOOK to this package, which is triggered while 
#                    installing or upgrading a package
#       -v --variable <VAR>=<VAL>
#                    set a variable VAR with value VAL,
#                    useful for setting up files for linking 
#
#       --verbose    display more info for some commands
#
# Hook types:
#   pre=<SCRIPT>     Any arbitrary POSIX script that runs before linking.
#   post=<SCRIPT>    Any arbitrary POSIX script that runs after linking.
#   uninstall=<...>  Any arbitrary POSIX script that runs before uninstalling.
#                    For the above hooks, if multiples are given, the older
#                    one will be overriden.
#   +x=<FILE>        Before linking, adds executable bit to the FILE. If
#                    multiples are given, they will be run in sequential order.
#   a+x              Before linking, add executable bit to all files.
# 
# Examples:
#   shsh install soraxas/dot-reminder
#                    install 'soraxas/dot-reminder' as a package
#   shsh install --ssh <package>
#                    install with ssh protocal (rather than https)
#   shsh install <package> -v FISH_COMPLETIONS=synoservice.fish:forgit.fish
#                    link 'synoservice.fish' and 'forgit.fish' as fish
#                    completion files
#   shsh install <package> --hook pre="mv bin/foo bin/bar"
#                    Execute the script "mv bin/foo bin/bar" before `shsh`
#                    performs linking (e.g. this script renames the binary)
#   shsh install <package> --hook +x=foobar
#                    add a hook that add executable bits to the file 'foobar',
#                    before linking is performed
#   shsh install <package> -h pre='make all' -h post='rm -r build/*'
#                    add a hook that runs 'make all' to build binaries, right
#                    after cloning and before linking is performed. Then, 
#                    linking is performed with its usual rules (i.e. all 
#                    executable files in root and in bin/). Finally, 
#                    'rm -r build/*' is ran to remove leftovers.


set -e

use_ssh="false"

for arg; do
  shift
  case "$arg" in
    --ssh)
      use_ssh="true"
      ;;
    -h|--hook)
      echo Not implemented yet
      exit 1
      ;;
    -v|--variable)
      echo Not implemented yet
      exit 1
      ;;
    --)  # stop parsing
      break
      ;;
    -*|--*=)
      echo "Error: Unsupported flag '$arg'" >&2
      exit 1
      ;;
    *)
      # set back any unused args
      set -- "$@" "$arg"
  esac
done

# PARAMS=""
# while (( "$#" )); do
#   case "$1" in
#     --ssh)
#       use_ssh="true"
#       shift
#       ;;
#     -h|--hooks)
#       if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
#         declare -A "hooks=$2"
#         shift 2
#       else
#         echo "Error: Argument for $1 is missing" >&2
#         exit 1
#       fi
#       ;;
#     -*|--*=) # unsupported flags
#       echo "Error: Unsupported flag $1" >&2
#       exit 1
#       ;;
#     *) # postserve positional arguments
#       PARAMS="$PARAMS $1"
#       shift
#       ;;
#   esac
# done
# # set positional arguments in their proper place
# eval set -- "$PARAMS"

# for hook in "${!hooks[@]}"; do
#   case "$hook" in
#     pre|post|a+x|+x)
#       ;;
#     *)
#       echo "Error: Unknown hook type '$hook' with value '${hooks[$hook]}'"
#       exit 1
#   esac
# done


if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
  shsh-help install
  exit 1
fi

case "$1" in
  */*/*)
    IFS=/ read -r site user name <<EOF
$1
EOF
    ;;
  */*)
    IFS=/ read -r user name <<EOF
$1
EOF
    site="github.com"
    ;;
  *)
    shsh-help install
    exit 1
    ;;
esac
package="${user}/${name}"

# defaults to package's name, but allows custom folder name
folder="$package"
if [ -n "$2" ]; then
  case "$2" in
    */*)
      ;;
    *)
      shsh-help install
      echo "Optional argunment [folder] must be in the format <...>/<...>"
      exit 1
      ;;
  esac
  folder="$2"
fi

if [ -z "$package" ]; then
  shsh-help install
  exit 1
fi

IFS=/ read -r user name <<EOF
$package
EOF

if [ -z "$user" ]; then
  shsh-help install
  exit 1
fi

if [ -z "$name" ]; then
  shsh-help install
  exit 1
fi

ref=""
case "$package" in
  */*@*)
    IFS=@ read -r package ref <<EOF
$package
EOF
    ;;
esac

if [ -z "$folder" ]; then
  folder="$package"
fi
target_folder="${SHSH_PACKAGES_PATH}/$folder"

execute_hooks() {
  echo "> Executing $1"
  (cd "$target_folder" && eval "$2")
}

# only perform link if clone is successful (and package not exists before)
if shsh-_clone "$use_ssh" "$site" "$package" "$ref" "$folder"; then
  shsh-_deps "$folder"
  # [ -n "${hooks[+x]}" ] && execute_hooks "+x-hook" "chmod +x ${hooks[+x]}"
  # [ -n "${hooks[a+x]}" ] && execute_hooks "a+x hook" "chmod -R +x ."
  # [ -n "${hooks[pre]}" ] && execute_hooks "pre-hook" "${hooks[pre]}"

  shsh-_link-bins "$folder"
  shsh-_link-man "$folder"
  shsh-_link-completions "$folder"
  # [ -n "${hooks[post]}" ] && execute_hooks "post-hook" "${hooks[post]}"
fi
