#!/usr/bin/env sh
#, respectively.
# Summary: Installs a package from github, custom site, or any arbitrary recipes.
#
# Usage: shsh install [site]/<package>[@ref] [<folder>/<folder>]
#                     [-h|--hook <hook>] [-v|--variable <VAR>=<VAL>] [--ssh]
#                     [--nocleanup] [-f|--force]
#   or:  shsh install --plain <folder>/<folder>
#                     [-h|--hook <hook>] [-v|--variable <VAR>=<VAL>]
#                     [--nocleanup] [-f|--force]
#
# Options:
#       -h, --hook <HOOK_TYPE>[=<CONTENT>]
#                    add HOOK to this package, which is triggered while 
#                    installing or upgrading a package
#       -v --variable <VAR>=<VAL>
#                    set a variable VAR with value VAL,
#                    useful for setting up files for linking 
#       --nocleanup  do not perform cleanup (shsh uninstall <package>)
#                    even if something failed in the installination process
#       --plain      do not clone from a git repository; useful to use hooks
#                    script to build a package from the ground up
#       -f, --force  force the installation even if the package exists
#       --ssh        use ssh protocal instead of https
#
#       --verbose    display more info for some commands
#
# Hook types:
#   pre=<SCRIPT>     Any arbitrary POSIX script that runs before linking.
#   post=<SCRIPT>    Any arbitrary POSIX script that runs after linking.
#   uninstall=<...>  Any arbitrary POSIX script that runs before uninstalling.
#                    For the above hooks, if multiples are given, the older
#                    one will be overriden.
#   +x=<FILE>        Before linking, adds executable bit to the FILE. If
#                    multiples are given, they will be run in sequential order.
#   a+x              Before linking, add executable bit to all files.
# 
# Examples:
#   shsh install soraxas/dot-reminder
#                    install 'soraxas/dot-reminder' as a package
#   shsh install soraxas/git-utils git/tools
#                    install 'soraxas/git-utils' to a folder within 'git/tools'
#   shsh install --ssh <package>
#                    install with ssh protocal (rather than https)
#   shsh install <package> -v FISH_COMPLETIONS=synoservice.fish:forgit.fish
#                    link 'synoservice.fish' and 'forgit.fish' as fish
#                    completion files
#   shsh install <package> --hook pre="mv bin/foo bin/bar"
#                    Execute the script "mv bin/foo bin/bar" before `shsh`
#                    performs linking (e.g. this script renames the binary)
#   shsh install <package> --hook +x=foobar
#                    add a hook that add executable bits to the file 'foobar',
#                    before linking is performed
#   shsh install <package> -h pre='make all' -h post='rm -r build/*'
#                    add a hook that runs 'make all' to build binaries, right
#                    after cloning and before linking is performed. Then, 
#                    linking is performed with its usual rules (i.e. all 
#                    executable files in root and in bin/). Finally, 
#                    'rm -r build/*' is ran to remove leftovers.
#   shsh install --plain wsl-tools/win32yank -h pre='curl -sLo out.zip \
#                https://<..>/releases/<..>.zip && unzip out.zip' -h +x=win32yank.exe
#                    add a plain package by using curl to download pre-built
#                    binary from upstream release page.


set -e
# shellcheck source=libexec/shsh-_utils
. "${UTILS_FUNC:?}"

original_args="$(requote_args "$@")"

use_ssh="false"
# shellcheck disable=SC2116
EOL=$(echo '\00\07\01\00')
if [ "$#" != 0 ]; then
  set -- "$@" "$EOL"
  while [ "$1" != "$EOL" ]; do
    opt="$1"; shift
    case "$opt" in
      --ssh)
        use_ssh="true"
        ;;
      --nocleanup)
        no_cleanup="true"
        ;;
      -f|--force)
        force_install="true"
        ;;
      --plain)
        # set a dummy remote package name
        set -- "PLACE/HOLDER" "$@"
        plain_package="true"
        ;;
      -h|--hook)
        case "$1" in
          # pre|post|uninstall|+x)
          #   check_key_val_pair "$1" "$opt"
          #   ;;
          pre=*|post=*|uninstall=*)
            _hook_type="$(echo "${1%%=*}" | tr '[:lower:]' '[:upper:]')"
            _hook_value="${1#*=}"
            eval "SHSH_HOOK_$_hook_type='$_hook_value'"
            ;;
          +x=*)
            if [ -z "$SHSH_HOOK_PLUS_X" ]; then
              SHSH_HOOK_PLUS_X="${1#*=}"
            else
              SHSH_HOOK_PLUS_X="$SHSH_HOOK_PLUS_X:${1#*=}"
            fi
            ;;
          a+x)
            SHSH_HOOK_ALL_PLUS_X=true
            ;;
          *)
            echo "Unrecognized hook type '$1'"
            exit 1
            ;;
        esac
        shift
        ;;
      -v|--variable)
        check_key_val_pair "$1" "$opt"
        _var="${1%%=*}"
        _val="${1#*=}"
        [ -z "$_var" ] && echo "Invalid argunment for '--variable' with '$1'" && exit 1
        eval "$_var='$_val'"
        export "${_var?}"
        shift ;;
      --*=*)  # convert '--name=arg' to '--name' 'arg'
        set -- "${opt%%=*}" "${opt#*=}" "$@";;                        
      -[!-]?*)  # convert '-abc' to '-a' '-b' '-c'
        # shellcheck disable=SC2046  # we want word splitting
        set -- $(echo "${opt#-}" | sed 's/\(.\)/ -\1/g') "$@";;       
      --)  # process remaining arguments as positional
        while [ "$1" != "$EOL" ]; do set -- "$@" "$1"; shift; done;;  
      -*)
        echo "Error: Unsupported flag '$opt'" >&2
        exit 1
        ;;
      *)
        # set back any unused args
        set -- "$@" "$opt"
    esac
  done
  shift # remove the EOL token
fi


if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
  shsh-help install
  exit 1
fi

if [ -n "$plain_package" ] && [ "$#" -lt 2 ]; then
  shsh-help install
  echo "Argunment <folder>/<folder> is necessary for plain package"
  exit 1
fi

case "$1" in
  */*/*)
    IFS=/ read -r site user name <<EOF
$1
EOF
    ;;
  */*)
    IFS=/ read -r user name <<EOF
$1
EOF
    site="github.com"
    ;;
  *)
    shsh-help install
    exit 1
    ;;
esac
package="${user}/${name}"

# defaults to package's name, but allows custom folder name
folder="${package%%@*}"
if [ -n "$2" ]; then
  case "$2" in
    */*)
      ;;
    *)
      # shsh-help install
      echo "Optional argunment [folder] must be in the format <...>/<...>, not '$2'"
      exit 1
      ;;
  esac
  folder="$2"
fi

if [ -z "$package" ]; then
  shsh-help install
  exit 1
fi

IFS=/ read -r user name <<EOF
$package
EOF

if [ -z "$user" ]; then
  shsh-help install
  exit 1
fi

if [ -z "$name" ]; then
  shsh-help install
  exit 1
fi

ref=""
case "$package" in
  */*@*)
    IFS=@ read -r package ref <<EOF
$package
EOF
    ;;
esac

target_folder="${SHSH_PACKAGES_PATH}/$folder"

on_exit () {
  # shellcheck disable=SC2181
  [ $? -eq 0 ] && exit
  # non-zero exit status
  [ -n "$no_cleanup" ] && exit
  echo "> Error occured. Cleaning up..."
  export hook_uninstall
  shsh uninstall "$folder"
}
trap on_exit EXIT


## INSTALLING
if [ -z "$plain_package" ]; then
  # shellcheck disable=SC2015
  [ -n "$force_install" ] && shsh uninstall "$folder" >/dev/null 2>&1 || true
  # only perform link if clone is successful (and package not exists before)
  if ! shsh-_clone "$use_ssh" "$site" "$package" "$ref" "$folder"; then
    exit
  fi
  shsh-_deps "$folder"
else
  mkdir -p "$target_folder"
  package="$folder"
fi

[ -n "$SHSH_HOOK_PRE" ] && execute_hooks "pre-hook" "$target_folder" "$SHSH_HOOK_PRE"
[ -n "$SHSH_HOOK_PLUS_X" ] && execute_hooks "+x hook" "$target_folder" "IFS=:; for x in \$SHSH_HOOK_PLUS_X; do chmod +x \"\$x\"; done"
[ -n "$SHSH_HOOK_ALL_PLUS_X" ] && execute_hooks "a+x hook" "$target_folder" "chmod -R +x ."

## LINKING
shsh-_link-bins "$folder"
shsh-_link-man "$folder"
shsh-_link-completions "$folder"
[ -n "$SHSH_HOOK_POST" ] && execute_hooks "post-hook" "$target_folder" "$SHSH_HOOK_POST"


## SHSHRC
# add successfully installed package to shshrc
if [ -e "$SHSHRC" ]; then
  set +e  # allow non-zero exit status in pattern matching
  shshrc_get_existing_install_cmd "$package"
  new_statement="shsh install $original_args"

  if [ -z "$existing" ]; then
    # append the file with new package
    echo "> Appending statement to \$SHSHRC: \"$new_statement\""
    echo "$new_statement" >> "$SHSHRC"

  # check if existings are the same (e.g. with same flags etc.)
  elif [ "$existing" != "shsh install $original_args" ]; then
    # update the file with new args/flags
    new_statement="${existing_prefix}${new_statement}${existing_suffix}"
    # 1st sed pattern: escape '&' (in awk gsub it has the meaning of matched string)
    # 2nd sed pattern: all backslash needs to be doubled in awk
    new_statement="$(echo "$new_statement" | \
      sed 's/&/\\&/g; s/\\/\\\\/g')"
    
    echo "> Updating existing statement in \$SHSHRC to \"$new_statement\""
    awk '{gsub(old,new); print}' old="^[[:space:]]*shsh install $1([[:space:]].*)?$" \
      new="$new_statement" "$SHSHRC" > "${SHSHRC}.tmp" && mv "${SHSHRC}.tmp" "${SHSHRC}"
  fi
  set -e
fi
