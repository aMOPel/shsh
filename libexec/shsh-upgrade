#!/usr/bin/env sh
# Summary: Upgrades a package
# Usage: shsh upgrade <package|[-a|--all]> 

set -e

. "${UTILS_FUNC:?}"

case $1 in
  -a|--all)
    upgrade_all="true"
    shift
  ;;
esac

if [ -n "$upgrade_all" ]; then
  lockfile="$(mktemp)"

  update_and_refresh_screen() {
    flock -w 20 5 || :
    update_line "$1" "$2" "$lockfile"
    clear_prev_lines "$line_nums"
    cat "$lockfile"
    flock -u 5 || :
  }

  for package in $(shsh list); do
    echo "Checking status of $package..." >> "$lockfile"
  done
  line_nums=$(wc -l < "$lockfile")
  cat "$lockfile"
  for package in $(shsh list); do
    (
      if git_check_up_to_date "$SHSH_PACKAGES_PATH/$package"; then
        update_and_refresh_screen "$package" "Already up-to-date with $package"
      else
        update_and_refresh_screen "$package" "Updating $package..."
        if shsh-upgrade "$package" >/dev/null 2>&1; then
          msg="Updated $package"
        else
          msg="Failed to update $package, with exit code $?"
        fi
        update_and_refresh_screen "$package" "$msg"
      fi
    ) 5>>"$lockfile" &
  done
  wait
  rm -f "$lockfile"
  exit
fi

if [ "$#" -ne 1 ]; then
  shsh-help upgrade
  exit 1
fi

# TAG completions
if [ "$1" = "--complete" ]; then
  exec shsh-list
fi

package="$1"

if [ -z "$package" ]; then
  shsh-help upgrade
  exit 1
fi

IFS=/ read -r user name <<EOF
$package
EOF

if [ -z "$user" ]; then
  shsh-help upgrade
  exit 1
fi

if [ -z "$name" ]; then
  shsh-help upgrade
  exit 1
fi

if git_check_up_to_date "${SHSH_PACKAGES_PATH}/$package"; then
  exit
fi

# unlink everything first
shsh-_unlink-man "$package"
shsh-_unlink-bins "$package"
shsh-_unlink-completions "$package"
# upgrade the package
cd "${SHSH_PACKAGES_PATH}/$package"
git pull
# relink the package components
shsh-_link-bins "$package"
shsh-_link-man "$package"
shsh-_link-completions "$package"
# upgrade any dependencies it needs
for dep in $(shsh-_deps --get "$package")
do
  shsh-upgrade "$dep"
done
