#!/usr/bin/env sh

set -e

# shellcheck source=libexec/shsh-_utils
. "${UTILS_FUNC:?}"

package="$1"
target_folder="$2"
gh_release="$3"
ref="$4"


# script for gh release
if [ -n "$gh_release" ]; then

  _response="$(request_gh_release_info "$package" "$ref")"

  if [ "$(jq -r -n --argjson data "$_response" '$data.message')" = "Not Found" ]; then
    error_echo "> The given github repo '$package' was not found"
    exit 1
  fi

  # save the release tag to file
  jq -n --argjson data "$_response" '$data' > "$target_folder/.gh-release_info"

  # using EOF method as the original json might contain invalid characters
  all_available_assets="$(jq -n --argjson data "$_response" '$data.assets')"
  available_assets="$all_available_assets"

  #########################################
  # auto-determine the target asset name
  #########################################

  auto_determine_assets() {
    available_assets="$1"
    for pref in $gh_release_asset x86_64 x86-64 amd64 linux64; do
      item="$(echo "$available_assets" | jq -r '.[] | select(.name|test("'"$pref"'"))')"
      if [ -n "$item" ]; then
        echo "$item"
      fi
    done
  }

  filter_by_preference() {
    # Filter out available options. If there are no more
    # canidates left after the filtering, revert back to
    # the original list
    # $1 jq array
    # $2 jq filter
    available_assets="$1"
    canidates="$( echo "$available_assets" | jq -r "$2" )"
    if [ -n "$(echo "$canidates" | jq 'select(length > 0)' )" ]; then
      # only replace when there are canidates left
      available_assets="$canidates"
    fi
    echo "$available_assets"
    echo_if_verbose ">> filtering with '$2'"
    echo_if_verbose ">>>> from '$(echo "$1" | jq -r '.[].name' | tr '\n' ' ')' to '$(echo "$available_assets" | jq -r '.[].name' | tr '\n' ' ')'"
  }

  # necessary condition
  available_assets="$(auto_determine_assets "$available_assets")"
  available_assets="$(echo "$available_assets" | jq -s '.' )"

  # check results
  if [ -z "$(echo "$available_assets" | jq 'select(length > 0)' )" ]; then
    printf "%s\n%s\n" ">> Unable to find suitable release asset. Available release assets are:" "$( echo "$all_available_assets" | jq -r '.[].name' )"
    exit 1
  fi

  ##############################
  # preferred condition
  # archives
  available_assets="$(filter_by_preference "$available_assets" 'map(select(.name|test("(.tgz)|(.tar.gz)|(.zip)|(.xz)$")))')"
  # prefer statically linked assets
  available_assets="$(filter_by_preference "$available_assets" 'map(select(.name|test(["(linux-musl)|(linux)", "i"])))')"

  # get first item
  item="$(echo "$available_assets" | jq -r '.[0]')"

  gh_release_asset="$(echo "$item" | jq -r '.name' | head -1)"

  case "$gh_release_asset" in
    *gz|*xz)
      unarchive_cmd="tar xvf"
      ;;
    *zip)
      unarchive_cmd="unzip"
      ;;
    *)
      # non-archive
      unarchive_cmd="echo"
      ;;
  esac
  echo ">> Going to download release asset '$gh_release_asset'"

  # We don't want the nested variables to expand
  # shellcheck disable=SC2016
  _script='wget '"$(echo "$item" | jq -r '.browser_download_url' | head -1)"' && '$unarchive_cmd' "$gh_release_asset"'
  execute_hooks "downloading gh-release" "$target_folder" "$_script"

  # move files 1 directory up, if they are all in 1 sub directory,
  # because the file searching breaks down otherwise
  extracted=$target_folder/$(ls --ignore=*gz --ignore=*xz --ignore=*zip --ignore=.gh-release_info $target_folder)
  case "$(echo $extracted | wc -w)" in
    1)
    if [ -d "$extracted" ]; then
      for fileOrDir in $(ls -A $extracted)
        do
          mv $extracted/$fileOrDir $extracted/../$fileOrDir
        done
        rm -r $extracted
    fi
    ;;
  esac

fi

# run hooks
[ -n "$SHSH_HOOK_PRE" ] && execute_hooks "pre-hook" "$target_folder" "$SHSH_HOOK_PRE"
[ -n "$SHSH_HOOK_PLUS_X" ] && execute_hooks "+x hook" "$target_folder" "IFS=:; for x in \$SHSH_HOOK_PLUS_X; do chmod +x \"\$x\"; done"
[ -n "$SHSH_HOOK_ALL_PLUS_X" ] && execute_hooks "a+x hook" "$target_folder" "chmod -R +x ."

## LINKING
shsh-_link-bins "$package"
shsh-_link-man "$package"
shsh-_link-completions "$package"
# shellcheck disable=SC2015
[ -n "$SHSH_HOOK_POST" ] && execute_hooks "post-hook" "$target_folder" "$SHSH_HOOK_POST" || true
