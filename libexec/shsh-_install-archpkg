#!/usr/bin/env sh

set -e

# shellcheck source=libexec/shsh-_utils
. "${UTILS_FUNC:?}"

archpkgname="$1"
package="$2"


on_exit() {
  # non-zero exit status
  [ -n "$no_cleanup" ] && exit
  echo "> Error occured. Cleaning up..."
  export hook_uninstall
  shsh uninstall "$package"
}
trap on_exit EXIT


echo "> Checking official Arch and AUR repos"
# Check official repo - core
(
    set -e
    out="$(git ls-remote --heads https://github.com/archlinux/svntogit-packages.git packages/"$1" 2>/dev/null)"
    [ -z "$out" ] && exit 1 || exit 0
) &
pid_core="$!"

# Check official repo - community
(
    set -e
    out="$(git ls-remote --heads https://github.com/archlinux/svntogit-community.git packages/"$1" 2>/dev/null)"
    [ -z "$out" ] && exit 1 || exit 0
) &
pid_comm="$!"

# Check AUR repo
(
    set -e
    http_status="$(curl -I -L -s https://aur.archlinux.org/cgit/aur.git/snapshot/"$archpkgname".tar.gz | head -n1 | awk '{print $2}')"
    [ "$http_status" = "200" ] && exit 0 || exit 1
) &
pid_aur="$!"

status_core=0
status_comm=0
status_aur=0

wait "$pid_core" || status_core="$?"
wait "$pid_comm" || status_comm="$?"
wait "$pid_aur" || status_aur="$?"

##################################
unset svntogit_dest

if [ "$status_core" = 0 ]; then
    svntogit_dest="svntogit-packages"
elif [ "$status_comm" = 0 ]; then
    svntogit_dest="svntogit-community"
fi

echo "> Downloading PKGBUILD"
(
    set -e
    cd "$SHSH_PACKAGES_PATH/$package"

    if [ -n "$svntogit_dest" ]; then
        git clone --single-branch --depth 1 https://github.com/archlinux/"$svntogit_dest" -b packages/"$archpkgname"
        mv "$svntogit_dest/trunk" "$archpkgname"
        rm -rf "${svntogit_dest:?}"
    elif [ "$status_aur" = 0 ]; then
        git clone https://aur.archlinux.org/"$archpkgname".git
    else
        error_echo "Package '$archpkgname' cannot be found."
        exit 1
    fi

    echo "> Running makepkg"
    {
        # move nested files to one level up
        set -eu
        mv "${SHSH_PACKAGES_PATH:?}/$package/$archpkgname/"* "$SHSH_PACKAGES_PATH/$package/"
        rm -rf "${SHSH_PACKAGES_PATH:?}/$package/$archpkgname"
        set +u

        _patch_awk_pattern() {
            set -u
            awk '{gsub(old,new); print}' old="$1" new="$2"
        }

        patch_pkgbuild_add_shsh_archpkg_root_variable() {
            _old_pattern='^pkgname=.*$'
            _new_pattern="SHSH_ARCKPKG_ROOT=\"$SHSH_ARCKPKG_ROOT\"\n&"

            _patch_awk_pattern "$_old_pattern" "$_new_pattern"
        }

        patch_pkgbuild_cmake_install_prefix() {
            # TODO: deal with DCMAKE_INSTALL_SYSCONFDIR ?
            _old_pattern='-D[ ]*CMAKE_INSTALL_PREFIX[ ]*=[ ]*/usr'
            # shellcheck disable=SC2016
            _new_pattern='-DCMAKE_INSTALL_PREFIX="${SHSH_ARCKPKG_ROOT}"/usr'

            _patch_awk_pattern "$_old_pattern" "$_new_pattern"
        }

        patch_pkgbuild_configure_prefix() {
            _old_pattern='--prefix=/usr'
            # shellcheck disable=SC2016
            _new_pattern='--prefix="${SHSH_ARCKPKG_ROOT}"/usr'

            awk '/.\/configure/{gsub(old,new)}1' old="$_old_pattern" new="$_new_pattern"
        }

        patch_pkgbuild_make_install() {
            # search for make install line
            _old_pattern='(^.*[ ]+(make|ninja).*install([ ].*)?$)'
            # and append a mv command right after, to move files back into staging location.
            # shellcheck disable=SC2016
            _new_pattern='&\nmv "${pkgdir}/$SHSH_ARCKPKG_ROOT/usr" "${pkgdir}"  #<<patched'

            _patch_awk_pattern "$_old_pattern" "$_new_pattern"
        }

        ##### Check for PKGBUILD
        file="PKGBUILD"
        # enable auto-patching cmake for install prefix (which alter the pkg-config prefix correctly)

        if [ -n "$(awk '/CMAKE_INSTALL_PREFIX/' "$file" )" ]; then
            PKGBUILD_AUTO_PATCHED="cmake_install_prefix"
        elif [ -n "$(awk '/.\/configure/' "$file" )" ]; then
            PKGBUILD_AUTO_PATCHED="configure_prefix"
        fi

        if [ -n "$PKGBUILD_AUTO_PATCHED" ]; then
            echo "> Pattern of '$PKGBUILD_AUTO_PATCHED' found."
            if [ -n "$SHSH_ARCHPKG_NOCONFIRM" ] || prompt "> Auto-patch PKGBUILD?"; then
                echo "> Patching the $file file."

                patch_pkgbuild_add_shsh_archpkg_root_variable < "${file}" | \
                    patch_pkgbuild_$PKGBUILD_AUTO_PATCHED | \
                    patch_pkgbuild_make_install \
                    > "${file}.tmp" && mv "${file}.tmp" "${file}"
            fi
        fi

        if [ -z "$SHSH_ARCHPKG_NOCONFIRM" ] && prompt "Manually Edit PKGBUILD?"; then
          ${EDITOR:+vim} PKGBUILD
        fi
        #shellcheck disable=SC2086
        makepkg ${SHSH_ARCHPKG_CHECK:-"--nocheck"} ${SHSH_ARCHPKG_PGPCHECK:-"--skippgpcheck"}

        if [ -n "$PKGBUILD_AUTO_PATCHED" ]; then
            # after patching pkgbuild, the cmake/make sometimes install things into $prefix/urs/local instead
            # of $prefix/usr/
            :
        fi

        echo "> Linking archpkg"
        mkdir -p "$SHSH_INSTALL_ARCHPKG_ROOT"
        cp -as "$(pwd)/pkg/$archpkgname/usr" "$SHSH_INSTALL_ARCHPKG_ROOT"
    }
)

# un-trap
trap - EXIT

